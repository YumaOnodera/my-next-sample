import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";

import AuthValidationErrors from "components/AuthValidationErrors";
import AppLayout from "components/Layouts/AppLayout";
import GuestLayout from "components/Layouts/GuestLayout";
import { usePosts } from "hooks/posts/usePosts";
import { useAuth } from "hooks/useAuth";
import { toggleModal } from "store/modules/postModal";
import { setKeyword, setOrder } from "store/modules/postSearch";

import type { NextPage } from "next";
import type { RootState } from "store/types/rootState";
import type { Errors } from "types/errors";

const Home: NextPage = () => {
  const router = useRouter();

  const [errors, setErrors] = useState<Errors>([]);
  const [inputPost, setInputPost] = useState("");
  const [searchBarOpen, setSearchBarOpen] = useState(false);
  const [searchText, setSearchText] = useState("");

  const dispatch = useDispatch();
  const state = useSelector((state: RootState) => state);

  const { posts, storePost } = usePosts();
  const { user, logout } = useAuth();

  const submitForm = async (e: { preventDefault: () => void }) => {
    e.preventDefault();

    await storePost({ text: inputPost, setErrors });

    setInputPost("");
    dispatch(toggleModal());
  };

  const submitSearch = async (e: { preventDefault: () => void }) => {
    e.preventDefault();

    const order = searchText ? "" : "created_at:desc";

    dispatch(setKeyword(searchText));
    dispatch(setOrder(order));

    setSearchBarOpen(false);
  };

  return (
    <div>
      {user ? (
        <>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <AppLayout>
            <button onClick={() => setSearchBarOpen((prev) => !prev)}>
              検索
            </button>
            <form onSubmit={submitSearch}>
              {searchBarOpen && (
                <input
                  id="search"
                  type="text"
                  value={searchText}
                  onChange={(e) => setSearchText(e.target.value)}
                />
              )}
            </form>

            <select
              value={state.postSearch.order_by + ":" + state.postSearch.order}
              onChange={(e) => dispatch(setOrder(e.target.value))}
            >
              <option value="">関連度順</option>
              <option value="created_at:desc">作成日が新しい順</option>
              <option value="created_at:asc">作成日が古い順</option>
            </select>

            {/* Validation Errors */}
            <AuthValidationErrors errors={errors} />

            <button type="button" onClick={logout}>
              Logout
            </button>

            {state.postModal && (
              <form onSubmit={submitForm}>
                <textarea
                  id="name"
                  value={inputPost}
                  onChange={(e) => setInputPost(e.target.value)}
                />
                <button type="submit">投稿</button>
              </form>
            )}

            {posts?.data.map((post) => {
              return (
                <div key={post.id}>
                  <hr />
                  <div
                    onClick={() =>
                      router.push(`/${post.user_id}/articles/${post.id}`)
                    }
                  >
                    {post.text}
                  </div>
                  <Link href={`/${post.user_id}`}>
                    <a>{post.created_by}</a>
                  </Link>
                </div>
              );
            })}
          </AppLayout>
        </>
      ) : (
        <GuestLayout>
          <h2>ホーム</h2>
        </GuestLayout>
      )}
    </div>
  );
};

export default Home;
